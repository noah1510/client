on:
  workflow_call:
    inputs:
      GODOT_VERSION:
        description: 'The godot version string'
        required: true
        type: string
      EXTENSIONS_ARCHITECTURE:
        description: 'The architecture to build the extensions for'
        required: true
        type: string
      BUILD_OS:
        description: 'The OS to build the extension on'
        required: true
        type: string
      SEQUENTIAL_COMPILES:
        description: 'Whether to compile extensions sequentially'
        required: true
        type: boolean
      COMPILE_THREADS:
        description: 'The number of threads to use for compilation'
        required: false
        type: number
        default: 0
      UPDATE_CACHES:
        description: 'upload new cache versions'
        required: true
        type: boolean

jobs:
  compile_extensions_parallel:
    if: ${{ inputs.SEQUENTIAL_COMPILES == false }}

    strategy:
      fail-fast: false
      matrix:
        build_mode: [ debug, release ]
    
    name: "Parallel Compile Extensions ${{ inputs.BUILD_OS }} ${{ matrix.build_mode }}"
    runs-on: ${{ inputs.BUILD_OS }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - uses: actions/cache/restore@v4
        id: cache_restore
        with:
          path: extensions/build
          key: extension_cache_${{ runner.os }}_${{ matrix.build_mode }}_${{ inputs.EXTENSIONS_ARCHITECTURE }}_${{ inputs.GODOT_VERSION }}-${{ github.run_id }}
          restore-keys: |
            extension_cache_${{ runner.os }}_${{ matrix.build_mode }}_${{ inputs.EXTENSIONS_ARCHITECTURE }}_${{ inputs.GODOT_VERSION }}
            extension_cache_${{ runner.os }}_${{ matrix.build_mode }}_${{ inputs.EXTENSIONS_ARCHITECTURE }}
            
      - name: install build deps (linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y mold ccache ninja-build cmake

      - name: install build deps (macos)
        if: runner.os == 'macOS'
        run: |
          brew install ccache
          brew install mold
          brew install ninja

      - name: install build deps (windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install ninja
          choco install -y ccache

      - name: Compile the extension
        run: python ./utility_scripts/compile.py --target_arch=${{ inputs.EXTENSIONS_ARCHITECTURE }} --build_dir=extensions/build --mode=${{ matrix.build_mode }} --threads=${{ inputs.COMPILE_THREADS }}

      - name: Upload extension artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension_${{ runner.os }}_${{ matrix.build_mode }}_${{ inputs.EXTENSIONS_ARCHITECTURE }}
          path: |
            bin/*.dll
            bin/*.dll.a
            bin/*.dylib
            bin/**.framework
            bin/*.so
      
      - uses: actions/cache/save@v4
        id: cache_save
        if: ${{ inputs.UPDATE_CACHES == true }}
        with:
          path: extensions/build
          key: extension_cache_${{ runner.os }}_${{ matrix.build_mode }}_${{ inputs.EXTENSIONS_ARCHITECTURE }}_${{ inputs.GODOT_VERSION }}-${{ github.run_id }}


  compile_extensions_sequential:
    if: ${{ inputs.SEQUENTIAL_COMPILES == true }}
    name: "Sequential Compile Extensions ${{ inputs.BUILD_OS }}"
    runs-on: ${{ inputs.BUILD_OS }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - uses: actions/cache/restore@v4
        id: cache_restore
        with:
          path: extensions/build
          key: extension_cache_${{ runner.os }}_${{ matrix.build_mode }}_${{ inputs.EXTENSIONS_ARCHITECTURE }}_${{ inputs.GODOT_VERSION }}-${{ github.run_id }}
          restore-keys: |
            extension_cache_${{ runner.os }}_${{ matrix.build_mode }}_${{ inputs.EXTENSIONS_ARCHITECTURE }}_${{ inputs.GODOT_VERSION }}
            extension_cache_${{ runner.os }}_${{ matrix.build_mode }}_${{ inputs.EXTENSIONS_ARCHITECTURE }}

      - name: install build deps (linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y mold ccache ninja-build cmake

      - name: install build deps (macos)
        if: runner.os == 'macOS'
        run: |
          brew install ccache
          brew install mold
          brew install ninja

      - name: install build deps (windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install ninja
          choco install -y ccache

      - name: Compile the extension (debug)
        run: python ./utility_scripts/compile.py --target_arch=${{ inputs.EXTENSIONS_ARCHITECTURE }} --build_dir=extensions/build/debug --mode=debug --threads=${{ inputs.COMPILE_THREADS }}
      
      - name: Compile the extension (release)
        run: python ./utility_scripts/compile.py --target_arch=${{ inputs.EXTENSIONS_ARCHITECTURE }} --build_dir=extensions/build/release --mode=release --threads=${{ inputs.COMPILE_THREADS }}

      - name: Upload extension artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension_${{ runner.os }}_sequential_${{ inputs.EXTENSIONS_ARCHITECTURE }}
          path: |
            bin/*.dll
            bin/*.dll.a
            bin/*.dylib
            bin/**.framework
            bin/*.so
      
      - uses: actions/cache/save@v4
        id: cache_save
        if: ${{ inputs.UPDATE_CACHES == true }}
        with:
          path: extensions/build
          key: extension_cache_${{ runner.os }}_${{ matrix.build_mode }}_${{ inputs.EXTENSIONS_ARCHITECTURE }}_${{ inputs.GODOT_VERSION }}-${{ github.run_id }}
